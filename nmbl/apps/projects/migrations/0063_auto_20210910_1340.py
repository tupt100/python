# Generated by Django 2.2.17 on 2021-09-10 13:40

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import projects.tasksapp.models.customfields


# Generated by Django 2.2.17 on 2021-08-16 20:55

from django.db import migrations
from django.db.models import Q


def add_records(apps, schema_editor):
    '''
    We can't import the Post model directly as it may be a newer
    version than this migration expects. We use the historical version.
    '''

    Permission = apps.get_model('authentication', 'Permission')
    Organization = apps.get_model('authentication', 'Organization')
    Group = apps.get_model('authentication', 'Group')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    permission_category = 'tasktemplate'
    pers = [
        Permission(
            name='TaskTemplate View',
            permission_category=permission_category,
            slug='tasktemplate_tasktemplate-view',
        ),
        Permission(
            name='TaskTemplate Create',
            permission_category=permission_category,
            slug='tasktemplate_tasktemplate-create',
        ),
        Permission(
            name='TaskTemplate Update',
            permission_category=permission_category,
            slug='tasktemplate_tasktemplate-update',
        ),
        Permission(
            name='TaskTemplate Destroy',
            permission_category=permission_category,
            slug='tasktemplate_tasktemplate-destroy',
        ),
    ]

    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()

    if Permission.objects.all().count() > 0 and Group.objects.all().count() > 0 and DefaultPermission.objects.all().count() > 0:
        pers = Permission.objects.bulk_create(
            pers
        )
        for org in Organization.objects.all():
            for group in Group.objects.filter(Q(name='Admin')):
                d_pers = [
                    DefaultPermission(
                        group=group,
                        permission=per,
                        has_permission=True,
                    )
                    for per in pers
                ]
                DefaultPermission.objects.bulk_create(d_pers)

                g_pers = [
                    GroupAndPermission(
                        group=group,
                        permission=per,
                        company=org,
                        has_permission=True,
                    )
                    for per in pers
                ]
                GroupAndPermission.objects.bulk_create(g_pers)


def remove_records(apps, schema_editor):
    Permission = apps.get_model('authentication', 'Permission')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    permission_category = 'tasktemplate'
    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('projects', '0062_auto_20210719_1435'),
    ]

    operations = [
        migrations.AddField(
            model_name='task',
            name='custom_fields_value',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='Custom fields value'),
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=40, verbose_name='Title')),
                ('task_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Task name')),
                ('importance', models.IntegerField(blank=True, choices=[(0, 'No importance'), (1, 'Low'), (2, 'Med'), (3, 'High')], default=0, null=True, verbose_name='Task Priority')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due Date')),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Due Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_private', models.BooleanField(default=False, verbose_name='Is Private')),
                ('attorney_client_privilege', models.BooleanField(default=False, verbose_name='Task Privilege Attorney Client')),
                ('work_product_privilege', models.BooleanField(default=False, verbose_name='Task Privilege Work Product')),
                ('confidential_privilege', models.BooleanField(default=False, verbose_name='Task Privilege Confidential')),
                ('is_delete', models.BooleanField(default=False, verbose_name='Task Template Delete')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasktemplate_assigned_to_user', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('assigned_to_group', models.ManyToManyField(blank=True, related_name='tasktemplate_assigned_to_workgroup', to='projects.WorkGroup', verbose_name='WorkGroup Task')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('workflow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasktemplate_workflow', to='projects.Workflow', verbose_name='Task Workflow')),
            ],
            options={
                'verbose_name': 'Task template',
                'verbose_name_plural': 'Task templates',
            },
        ),
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(max_length=40, verbose_name='Label')),
                ('field_type', models.CharField(choices=[('Text', 'Text'), ('Int', 'Number'), ('Date', 'Date'), ('Currency', 'Currency')], default=projects.tasksapp.models.customfields.CustomFieldType('Text'), max_length=10, verbose_name='Type')),
                ('default_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Default value')),
                ('is_required', models.BooleanField(verbose_name='Is required?')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('task_template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.TaskTemplate', verbose_name='Task template')),
            ],
            options={
                'verbose_name': 'Custom field',
                'verbose_name_plural': 'Custom fields',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='task_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.TaskTemplate', verbose_name='Task template'),
        ),
        migrations.RunPython(
            add_records,
            reverse_code=remove_records,
        ),
    ]
