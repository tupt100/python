# Generated by Django 2.2.17 on 2021-11-10 18:53

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import projects.templates.models.templatecustomfields
from django.db.models import Q


def add_workflow_template_permission_records(apps, schema_editor):
    '''
    We can't import the Post model directly as it may be a newer
    version than this migration expects. We use the historical version.
    '''

    Permission = apps.get_model('authentication', 'Permission')
    Organization = apps.get_model('authentication', 'Organization')
    Group = apps.get_model('authentication', 'Group')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    permission_category = 'workflowtemplate'
    pers = [
        Permission(
            name='WorkflowTemplate View',
            permission_category=permission_category,
            slug='workflowtemplate_workflowtemplate-view',
        ),
        Permission(
            name='WorkflowTemplate Create',
            permission_category=permission_category,
            slug='workflowtemplate_workflowtemplate-create',
        ),
        Permission(
            name='WorkflowTemplate Update',
            permission_category=permission_category,
            slug='workflowtemplate_workflowtemplate-update',
        ),
        Permission(
            name='WorkflowTemplate Destroy',
            permission_category=permission_category,
            slug='workflowtemplate_workflowtemplate-destroy',
        ),
    ]

    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()

    if Permission.objects.all().count() > 0 and Group.objects.all().count() > 0 and DefaultPermission.objects.all().count() > 0:
        pers = Permission.objects.bulk_create(
            pers
        )
        for org in Organization.objects.all():
            for group in Group.objects.filter(Q(name='Admin')):
                d_pers = [
                    DefaultPermission(
                        group=group,
                        permission=per,
                        has_permission=True,
                    )
                    for per in pers
                ]
                DefaultPermission.objects.bulk_create(d_pers)

                g_pers = [
                    GroupAndPermission(
                        group=group,
                        permission=per,
                        company=org,
                        has_permission=True,
                    )
                    for per in pers
                ]
                GroupAndPermission.objects.bulk_create(g_pers)


def remove_workflow_template_permission_records(apps, schema_editor):
    Permission = apps.get_model('authentication', 'Permission')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    permission_category = 'workflowtemplate'
    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()


def add_project_template_permission_records(apps, schema_editor):
    Permission = apps.get_model('authentication', 'Permission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    Group = apps.get_model('authentication', 'Group')
    Organization = apps.get_model('authentication', 'Organization')
    permission_category = 'projecttemplate'
    pers = [
        Permission(name='ProjectTemplate View',
                   permission_category=permission_category,
                   slug=f'{permission_category}_{permission_category}-view'),
        Permission(name='ProjectTemplate Create',
                   permission_category=permission_category,
                   slug=f'{permission_category}_{permission_category}-create'),
        Permission(name='ProjectTemplate Update',
                   permission_category=permission_category,
                   slug=f'{permission_category}_{permission_category}-update'),
        Permission(name='ProjectTemplate Delete',
                   permission_category=permission_category,
                   slug=f'{permission_category}_{permission_category}-destroy'),
    ]

    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()

    if Permission.objects.all().count() > 0 and Group.objects.all().count() > 0 and DefaultPermission.objects.all().count() > 0:
        pers = Permission.objects.bulk_create(
            pers
        )
        for org in Organization.objects.all():
            for group in Group.objects.filter(Q(name='Admin')):
                d_pers = [
                    DefaultPermission(
                        group=group,
                        permission=per,
                        has_permission=True,
                    )
                    for per in pers
                ]
                DefaultPermission.objects.bulk_create(d_pers)

                g_pers = [
                    GroupAndPermission(
                        group=group,
                        permission=per,
                        company=org,
                        has_permission=True,
                    )
                    for per in pers
                ]
                GroupAndPermission.objects.bulk_create(g_pers)


def remove_project_template_permission_records(apps, schema_editor):
    Permission = apps.get_model('authentication', 'Permission')
    GroupAndPermission = apps.get_model('authentication', 'GroupAndPermission')
    DefaultPermission = apps.get_model('authentication', 'DefaultPermission')
    permission_category = 'projecttemplate'
    GroupAndPermission.objects.filter(permission__permission_category=permission_category).delete()
    DefaultPermission.objects.filter(permission__permission_category=permission_category).delete()
    Permission.objects.filter(permission_category=permission_category).delete()


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authentication', '0039_auto_20211104_0414'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('projects', '0065_auto_20211103_1617'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='custom_fields_value',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True,
                                                                 verbose_name='Custom fields value'),
        ),
        migrations.AddField(
            model_name='workflow',
            name='custom_fields_value',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True,
                                                                 verbose_name='Custom fields value'),
        ),
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=254, verbose_name='Title')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('importance',
                 models.IntegerField(blank=True, choices=[(0, 'No importance'), (1, 'Low'), (2, 'Med'), (3, 'High')],
                                     default=0, null=True, verbose_name='Priority')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due Date')),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Start Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_private', models.BooleanField(default=False, verbose_name='Is Private')),
                ('attorney_client_privilege',
                 models.BooleanField(default=False, verbose_name='Privilege Attorney Client')),
                ('work_product_privilege', models.BooleanField(default=False, verbose_name='Privilege Work Product')),
                ('confidential_privilege', models.BooleanField(default=False, verbose_name='Privilege Confidential')),
                ('is_delete', models.BooleanField(default=False, verbose_name='Template Delete')),
                ('assigned_to_group',
                 models.ManyToManyField(blank=True, related_name='projects_workflowtemplate_assigned_to_workgroup',
                                        to='projects.WorkGroup', verbose_name='WorkGroup')),
                ('assigned_to_users',
                 models.ManyToManyField(blank=True, related_name='projects_workflowtemplate_assigned_to_users',
                                        to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                 related_name='projects_workflowtemplate_created_by',
                                                 to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                              related_name='projects_workflowtemplate_assigned_project',
                                              to='projects.Project', verbose_name='Assigned Project')),
            ],
            options={
                'verbose_name': 'Workflow template',
                'verbose_name_plural': 'Workflow templates',
            },
        ),
        migrations.CreateModel(
            name='TemplateCustomField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(max_length=40, verbose_name='Label')),
                ('field_type', models.CharField(
                    choices=[('Text', 'Text'), ('Number', 'Number'), ('Date', 'Date'), ('Currency', 'Currency')],
                    default=projects.templates.models.templatecustomfields.TemplateCustomFieldType('Text'),
                    max_length=10, verbose_name='Type')),
                (
                'default_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Default value')),
                ('is_required', models.BooleanField(verbose_name='Is required?')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(
                    models.Q(('app_label', 'projects'), ('model', 'projecttemplate')),
                    models.Q(('app_label', 'projects'), ('model', 'workflowtemplate')), _connector='OR'), null=True,
                                                   on_delete=django.db.models.deletion.CASCADE,
                                                   to='contenttypes.ContentType', verbose_name='Content Type')),
            ],
            options={
                'verbose_name': 'Template custom field',
                'verbose_name_plural': 'Template custom fields',
            },
        ),
        migrations.CreateModel(
            name='ProjectTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=254, verbose_name='Title')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('importance',
                 models.IntegerField(blank=True, choices=[(0, 'No importance'), (1, 'Low'), (2, 'Med'), (3, 'High')],
                                     default=0, null=True, verbose_name='Priority')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due Date')),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Start Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_private', models.BooleanField(default=False, verbose_name='Is Private')),
                ('attorney_client_privilege',
                 models.BooleanField(default=False, verbose_name='Privilege Attorney Client')),
                ('work_product_privilege', models.BooleanField(default=False, verbose_name='Privilege Work Product')),
                ('confidential_privilege', models.BooleanField(default=False, verbose_name='Privilege Confidential')),
                ('is_delete', models.BooleanField(default=False, verbose_name='Template Delete')),
                ('assigned_to_group',
                 models.ManyToManyField(blank=True, related_name='projects_projecttemplate_assigned_to_workgroup',
                                        to='projects.WorkGroup', verbose_name='WorkGroup')),
                ('assigned_to_users',
                 models.ManyToManyField(blank=True, related_name='projects_projecttemplate_assigned_to_users',
                                        to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                 related_name='projects_projecttemplate_created_by',
                                                 to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Project template',
                'verbose_name_plural': 'Project templates',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='projects.ProjectTemplate', verbose_name='Project template'),
        ),
        migrations.AddField(
            model_name='workflow',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='projects.WorkflowTemplate', verbose_name='Workflow template'),
        ),
        migrations.RunPython(
            add_project_template_permission_records,
            reverse_code=remove_project_template_permission_records
        ),
        migrations.RunPython(
            add_workflow_template_permission_records,
            reverse_code=remove_workflow_template_permission_records
        )
    ]
